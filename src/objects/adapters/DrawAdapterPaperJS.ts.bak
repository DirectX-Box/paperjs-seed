import { DrawAdapterInterface } from "./DrawAdapterInterface";
import { PlanObject } from "../PlanObject";
import { PlanPoint } from "../PlanPoint";
import * as paper from "paper";

class DrawAdapterPaperJS implements DrawAdapterInterface
{
    // Stocke toutes les figures du plan.
    private paperShapes: Map< PlanObject, paper.Shape >;

    // Constructeur de l'adaptateur.
    public constructor()
    {
        this.paperShapes = new Map([]);
    }

    // Efface l'objet passé en paramètre.
    public deleteObject( object: PlanObject ) : void
    {
        let shape = this.paperShapes.get( object );
        if( shape )
        {
            shape.remove();
        }

        this.paperShapes.delete( object );
    }

    // Dessine l'objet passé en paramètre.
    public drawObject( object: PlanObject ) : void
    {
        let shapeToDraw = object.getShape();
        switch( shapeToDraw.getCount() )
        {
            case 1: {
                this.drawCircle( object );
                break;
            }
            case 2: {
                this.drawRectangle( object );
                break;
            }
        }
    }

    // Dessine un cercle PaperJS.
    private drawCircle( object: PlanObject ) : void
    {
        let origin = this.paperPointFromPlanPoint( object.getShape().getPoints()[0] );
        let shapeToDraw = new paper.Shape.Circle( origin, object.getShape().getRadius() );
        let shape = this.paperShapes.get( object );
        if( shape )
        {
            shape.replaceWith( shapeToDraw )
        }
        else
        {
            this.paperShapes.set( object, shapeToDraw );
        }
    }

    // Dessine un rectangle PaperJS.
    private drawRectangle( object: PlanObject ) : void
    {
        let points = object.getShape().getPoints();
        let p1 = this.paperPointFromPlanPoint( points[0] );
        let p2 = this.paperPointFromPlanPoint( points[1] );
        let shapeToDraw = new paper.Shape.Rectangle( p1, p2 );
        let shape = this.paperShapes.get( object );
        if( shape )
        {
            shape.replaceWith( shapeToDraw );
        }
        else
        {
            this.paperShapes.set( object, shapeToDraw );
        }
    }

    private paperPointFromPlanPoint( point: PlanPoint ) : paper.Point
    {
        return new paper.Point( point.getX(), point.getY() );
    } 
}